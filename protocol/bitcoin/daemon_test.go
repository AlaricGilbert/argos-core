package bitcoin

import (
	"testing"

	"github.com/AlaricGilbert/argos-core/argos/serialization"
	"github.com/cloudwego/netpoll"
	"github.com/stretchr/testify/assert"
)

func TestDaemonLocal(t *testing.T) {
	initOnce()

	localAddr := "127.0.0.1:8333"

	addr, _ := netpoll.ResolveTCPAddr("tcp", localAddr)
	daemon := &Daemon{
		addr: addr,
	}

	input := netpoll.NewLinkBuffer()
	output := netpoll.NewLinkBuffer()

	daemon.Mock(input, output)
	var data = []byte{
		0xf9, 0xbe, 0xb4, 0xd9, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x65, 0x00, 0x00, 0x00, 0xc5, 0xd9, 0x95, 0xec, 0x62, 0xea, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x11, 0xb2, 0xd0, 0x50, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x3b, 0x2e, 0xb3, 0x5d, 0x8c, 0xe6, 0x17, 0x65, 0x0f, 0x2f, 0x53, 0x61, 0x74, 0x6f, 0x73, 0x68,
		0x69, 0x3a, 0x30, 0x2e, 0x37, 0x2e, 0x32, 0x2f, 0xc0, 0x3e, 0x03, 0x00, 0x01,
	}
	input.WriteBinary(data)
	input.Flush()

	daemon.nonce = 0xdeadbeaf
	daemon.handle()

	output.Flush()

	var ver Version
	var header MessageHeader
	var err error
	var n, bytes int

	// deserialize test
	bytes, err = serialization.Deserialize(output, &header)
	assert.Nil(t, err)
	assert.NotNil(t, header)
	assert.Equal(t, 24, bytes)

	assert.Equal(t, uint32(97), header.Length)
	assert.Equal(t, "version", SliceToString(header.Command[:]))

	n, err = serialization.Deserialize(output, &ver)
	assert.Nil(t, err)
	assert.NotNil(t, ver)
	assert.Equal(t, 97, n)

	assert.Equal(t, int32(70015), ver.Version)
	assert.True(t, ver.Services.Serves(NODE_NETWORK))

	addrFrom := ver.AddrFrom.TCPAddr()
	addrReceived := ver.AddrReceived.TCPAddr()

	assert.Equal(t, localAddr, addrFrom.String())
	assert.Equal(t, localAddr, addrReceived.String())
	assert.Equal(t, uint64(0xdeadbeaf), ver.Nonce)
	assert.Equal(t, VarString("/Argos:0.1/"), ver.UserAgent)
	assert.Equal(t, int32(0), ver.StartHeight)
	assert.False(t, ver.Relay)
}
